---
- name: Ensure group {{ group }} exists
  group:
    name: "{{ group }}"
    state: present

- name: Add user {{ user }}
  user:
    name: "{{ user }}"
    group: "{{ group }}"
    shell: /bin/bash  
    state: present

- name: Add user {{ user }} to sudo
  lineinfile:
    path: /etc/sudoers.d/{{ user }}
    line: '{{ user }} ALL=(ALL) NOPASSWD: ALL'
    state: present
    mode: 0440
    create: yes
    validate: 'visudo -cf %s'

- name: Create .ssh directory
  file:
    path: /home/{{ user }}/.ssh
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: 0700

- name: Copy ssh secret key 
  copy:
    src: <<id_rsa>>
    dest: /home/{{ user }}/.ssh/id_rsa
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: 0400

- name: Copy ssh public key 
  copy:
    src: <<id_rsa.pub>>
    dest: /home/{{ user }}/.ssh/id_rsa.pub
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: 0644
    
- name: Copy authorized_keys to {{ user }}
  copy:
    src: /home/ubuntu/.ssh/authorized_keys
    dest: /home/{{ user }}/.ssh/authorized_keys
    owner: "{{ user }}"
    group: "{{ user }}"
    remote_src: True
    mode: 0600
        
- name: Define java_packages.
  set_fact:
    java_packages: "{{ __java_packages | list }}"
  when: java_packages is not defined
  
- name: Ensure Java is installed.
  apt:
    name: "{{ java_packages }}"
    state: present

- name: Set php_executable variable to a default if not defined.
  set_fact:
    php_executable: php
  when: php_executable is not defined

- name: Define php_packages.
  set_fact:
    php_packages: "{{ __php_packages | list }}"
  when: php_packages is not defined

- name: Ensure PHP is installed.
  apt:
    name: "{{ php_packages }}"
    state: present
    
- name: Ensure old versions of Docker are not installed.
  package:
    name:
      - docker
      - docker-engine
    state: absent

- name: Ensure dependencies are installed.
  apt:
    name:
      - zip
      - unzip
      - apt-transport-https
      - ca-certificates
    state: present

- name: Add Docker apt key.
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  register: add_repository_key
  ignore_errors: "{{ docker_apt_ignore_key_error }}"

- name: Ensure curl is present (on older systems without SNI).
  package: name=curl state=present
  when: add_repository_key is failed

- name: Add Docker apt key (alternative for older systems without SNI).
  shell: |
    set -o pipefail
    curl -sSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  args:
    warn: false
  when: add_repository_key is failed

- name: Add Docker repository.
  apt_repository:
    repo: "{{ docker_apt_repository }}"
    state: present
    update_cache: true
